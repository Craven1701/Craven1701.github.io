I"UC<h1 id="part1工作管理-job-control">Part1.工作管理 Job Control</h1>
<h2 id="一终端机下的后台管理">(一)终端机下的后台管理</h2>
<h3 id="1--放入后台">1. <code class="language-plaintext highlighter-rouge">&amp;</code> 放入后台</h3>
<p><code class="language-plaintext highlighter-rouge">&amp;</code> 加在命令末尾，放入shell后台以运行状态（running）工作</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"test job control"</span> &amp; <span class="c"># 我输入的命令</span>
<span class="o">[</span>1] 16561 <span class="c">#[1]是 job number 后面接着的就是PID</span>
<span class="nb">test </span>job control <span class="c"># 即使放到后台 stdout和stderr还是会输出到当前屏幕上</span>
Craven@MacBook/ % 
<span class="o">[</span>1]  + <span class="k">done       </span><span class="nb">echo</span> <span class="s2">"test job control"</span> <span class="c">#+ done表示任务已经完成了</span>
Craven@MacBook/ % 
</code></pre></div></div>
<h3 id="2ctrlz-任务放到后台并暂停">2.<code class="language-plaintext highlighter-rouge">ctrl+z</code> 任务放到后台并暂停</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>^Z
<span class="nb">jobs</span> <span class="nt">-s</span>
<span class="o">[</span>1]    suspended  tree
<span class="o">[</span>2]  - suspended  /usr/local/Cellar/vim/8.2.0050/bin/vim <span class="c"># - 表示最近最后第二个被放进后台的工作</span>
<span class="o">[</span>3]  + suspended  locate vim <span class="c"># +表示fg默认取用工作</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">-</code>  表示最近最后第二个被放进后台的工作
<code class="language-plaintext highlighter-rouge">+</code>  表示fg默认取用工作</p>

<h3 id="3-jobs">3. <code class="language-plaintext highlighter-rouge">jobs</code></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">jobs</span> <span class="o">[</span>OPTIONS] <span class="o">[</span>args ...]
<span class="c">#参数说明</span>
<span class="nt">-l</span> <span class="c">#除了列出job number与命令串之外，同时列出PID</span>
<span class="nt">-r</span> <span class="c">#仅仅列出正在后台run的工作</span>
<span class="nt">-s</span> <span class="c">#仅仅列出正在后台stop/suspended的工作</span>
</code></pre></div></div>
<h3 id="4fg-foreground后台工作取回">4.<code class="language-plaintext highlighter-rouge">fg</code> foreground后台工作取回</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">fg</span> %jobnumber <span class="c">#取回特定工作号码的工作，没有就是取回+</span>
</code></pre></div></div>
<h3 id="5bg-让后台的工作从suspended回到run">5.<code class="language-plaintext highlighter-rouge">bg</code> 让后台的工作从suspended回到run</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">bg</span> %jobsnumber
</code></pre></div></div>
<h3 id="6kill--killall">6.<code class="language-plaintext highlighter-rouge">kill</code> &amp; <code class="language-plaintext highlighter-rouge">killall</code></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">kill</span> <span class="nt">-signal</span> %jobnumber
<span class="nb">kill</span> <span class="nt">-signal</span> PID <span class="c">#注意这里前面不需要百分号</span>
<span class="nb">kill</span> <span class="nt">-l</span>
<span class="c">#参数说明</span>
<span class="nt">-l</span> <span class="c">#小写的L 列出当前kill能使用的signal编号 </span>
<span class="nt">-signal</span> <span class="c">#选择终止方式，可以用数字也可以用名称</span>

<span class="c">#获取想要的进程的PID 然后可以用kill杀掉</span>
ps aux | <span class="nb">grep</span> <span class="s1">'syslog'</span> | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'grep'</span> | <span class="nb">awk</span> <span class="s1">'{print $2}'</span>

</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>killall <span class="o">[</span>OPTION] <span class="o">[</span><span class="nb">command </span>name]
<span class="c">#这个命令不用PID 而是用进程名字来kill</span>
<span class="c">#参数说明</span>
<span class="nt">-i</span> <span class="c">#interactive 交互式 和rm的-i一个效果。 </span>
<span class="nt">-e</span> <span class="c">#exact的意思</span>
<span class="nt">-I</span> <span class="c">#命令名称</span>
</code></pre></div></div>

<p>常用的signal信号表</p>

<table>
  <thead>
    <tr>
      <th>代号</th>
      <th>名称</th>
      <th>内容</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>SIGHUP</td>
      <td>启动被终止的进程,可让该PI O重新读取自己的配置文件,类似重新启动</td>
    </tr>
    <tr>
      <td>2</td>
      <td>SIGINT</td>
      <td>相当于用键盘输入[ctrl]-C 来中断一个进程的运行</td>
    </tr>
    <tr>
      <td>9</td>
      <td>SIGKILL</td>
      <td>代表强制中断一个进程的执行,如果该进程执行到一半,那么尚未完成的部分可能会有[半成品]产生,类似vim会有.filename.swp保留下来</td>
    </tr>
    <tr>
      <td>15</td>
      <td>SIGTERM</td>
      <td>以正常的方式结束进程来终止该进程。由于是正常的终止,所以后续的操作会将它完成。不过,如果该进程已经发生问题,就是无法使用正常的方法终止时,输入这个信号也是没有用的</td>
    </tr>
    <tr>
      <td>17</td>
      <td>SIGSTOP</td>
      <td>相当于用键盘输入[ctrl]-z来暂停一个进程的运行</td>
    </tr>
  </tbody>
</table>

<h2 id="二脱机管理">(二)脱机管理</h2>
<h3 id="7-at">7. <code class="language-plaintext highlighter-rouge">at</code></h3>
<h3 id="8-nohup">8. <code class="language-plaintext highlighter-rouge">nohup</code></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nohup</span> <span class="o">[</span>命令与参数] &amp; <span class="c"># &lt;==== 在终端机后台工作</span>
</code></pre></div></div>

<h2 id="三进程管理-process-control">(三)进程管理 Process Control</h2>
<h3 id="进程查看">【进程查看】</h3>
<h3 id="9ps">9.<code class="language-plaintext highlighter-rouge">ps</code></h3>
<p>ps有些参数前面不需要<code class="language-plaintext highlighter-rouge">-</code> 有点神奇。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux <span class="c"># 查看系统所有进程数据</span>
ps <span class="nt">-lA</span> <span class="c"># 查看系统所有进程数据</span>
ps axjf <span class="c"># 连同部分进程树状态</span>

<span class="c">#参数说明</span>
<span class="nt">-A</span> <span class="c">#显示所有进程</span>
<span class="nt">-a</span> <span class="c">#与terminal无关的所有进程</span>
u <span class="c"># 与有效用户相关的进程</span>
x <span class="c"># 与a搭配</span>
不加参数就只输出terminal相关进程
<span class="c">#输出格式规划</span>
l <span class="c">#详细信息</span>
j <span class="c">#job formant</span>
<span class="nt">-f</span> <span class="c">#更完整的输出</span>
</code></pre></div></div>
<p><img src="/Users/ncc-1701-enterprise/Desktop/Screen Shot 2021-02-18 at 16.12.00.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">ps -l</code>各个字段含义如下</p>

<table>
  <thead>
    <tr>
      <th>字段名</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>UID/PID/PPID</td>
      <td>拥有该进程的UID，该进程的PID和PPID</td>
    </tr>
    <tr>
      <td>F (process flag)</td>
      <td>说明进程的权限，4 - root ; 1 可以fork但是不可exec<br />(macOS上有点不大一样)</td>
    </tr>
    <tr>
      <td>CPU (C)</td>
      <td>CPU使用率，单位为百分比</td>
    </tr>
    <tr>
      <td>PRI(prority)/NI(nice)</td>
      <td>优先级，数值越小在CPU那里的优先级越高</td>
    </tr>
    <tr>
      <td>SZ</td>
      <td>代表该进程使用多少内存</td>
    </tr>
    <tr>
      <td>RSS</td>
      <td> </td>
    </tr>
    <tr>
      <td>WCHAN</td>
      <td>表示进程是否运行中 运行中为 -</td>
    </tr>
    <tr>
      <td>ADDR</td>
      <td>Kernel function 指出该进程在内存的哪个部分</td>
    </tr>
    <tr>
      <td>S(STAT)</td>
      <td>R Running; S Sleep; T Stop/Traced; Z Zombie 已经终止却无法从内存中移除</td>
    </tr>
    <tr>
      <td>TTY</td>
      <td>登陆者的终端机位置 远程登录则是使用(pts/n)</td>
    </tr>
    <tr>
      <td>TIME</td>
      <td>实际消耗的CPU运行时间</td>
    </tr>
    <tr>
      <td>CMD(command)</td>
      <td>造成此程序触发的命令</td>
    </tr>
  </tbody>
</table>

<p>注意: 使用ps aux的时候会有一些不一样的字段出现，想要看的时候参考书P517</p>

<h3 id="10top-动态显示当前各个进程的cpu占用">10.<code class="language-plaintext highlighter-rouge">top</code> 动态显示当前各个进程的CPU占用</h3>

<p>我很喜欢在风扇呜呜吹的时候用这个，谁的占用率最高就直接kill掉 嗯 我太暴力了。我Linux和MacOS上的top命令方式不一样，具体的还是用 <code class="language-plaintext highlighter-rouge">?</code> 查看一下。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>top <span class="o">[</span><span class="nt">-d</span> 数字]
top <span class="o">[</span><span class="nt">-bnp</span><span class="o">]</span>
<span class="c">#参数说明</span>
<span class="nt">-d</span> <span class="c"># 接秒数 控制top的更新时间 默认是5</span>
<span class="nt">-b</span> <span class="c"># 以批次的方式执行</span>
<span class="nt">-n</span> <span class="c"># 与b搭配，意思是需要几次top结果的输出</span>
<span class="nt">-p</span> <span class="c"># 指定PID进行监测</span>

<span class="c">#执行过程中的命令按键</span>
？ <span class="c"># 显示在top过程中可以操作的按键</span>
P	 <span class="c"># 以CPU的使用资源排序来显示</span>
M  <span class="c"># 以内存的使用资源排序来显示</span>
N  <span class="c"># 以PID来排序</span>
T  <span class="c"># 由该进程使用的CPU时间积累（TIME+）来排序</span>
k  <span class="c"># 给予某个PID一个signal </span>
r  <span class="c"># 给予某个PID重新搞一个nice值</span>
q  <span class="c"># quit！</span>

top <span class="nt">-b</span> <span class="nt">-n</span> 2 <span class="o">&gt;</span> /tmp/top.txt <span class="c">#输出成文件</span>
</code></pre></div></div>

<h3 id="11pstree">11.<code class="language-plaintext highlighter-rouge">pstree</code></h3>

<p>macos上没有这个 显示进程之间的依赖关系</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pstree <span class="o">[</span><span class="nt">-A</span>|U] <span class="o">[</span><span class="nt">-up</span><span class="o">]</span>
<span class="c"># 参数说明</span>
<span class="nt">-A</span> <span class="c"># 各个进程树之间以ASCII字符来连接</span>
<span class="nt">-U</span> <span class="c"># utf8字符连接</span>
<span class="nt">-p</span> <span class="c"># 列出进程的PID</span>
<span class="nt">-u</span> <span class="c"># 同时列出每个进程所属账号的名称</span>
</code></pre></div></div>

<h3 id="进程执行的优先级">【进程执行的优先级】</h3>
<h3 id="12nice">12.<code class="language-plaintext highlighter-rouge">nice</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nice</span> <span class="o">[</span><span class="nt">-n</span> 数字] <span class="nb">command</span>
<span class="c">#参数说明</span>
<span class="nt">-n</span> <span class="c"># 后面接一个数值 重置NI值</span>
</code></pre></div></div>

<h3 id="13renice">13.<code class="language-plaintext highlighter-rouge">renice</code></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>renice <span class="o">[</span>number] PID
</code></pre></div></div>

<h3 id="系统资源查看">【系统资源查看】</h3>

<h3 id="14free">14.<code class="language-plaintext highlighter-rouge">free</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>free <span class="o">[</span><span class="nt">-b</span>|-k|-m|-g] <span class="o">[</span><span class="nt">-t</span><span class="o">]</span>
<span class="c">#参数</span>
<span class="nt">-b</span> <span class="c"># </span>
<span class="nt">-t</span> <span class="c"># 显示物理内存与swap总量</span>
</code></pre></div></div>
<p>这个命令我的macOS上没有</p>

<h3 id="15uname-查看内核相关信息">15.<code class="language-plaintext highlighter-rouge">uname</code> 查看内核相关信息</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<h3 id="16uptime-系统运行时间">16.<code class="language-plaintext highlighter-rouge">uptime</code> 系统运行时间</h3>

<p>我很喜欢用这个看我的MacOS开机多久了</p>

<h3 id="17netstat-有关进程管理和网络监控">17.<code class="language-plaintext highlighter-rouge">netstat</code> 有关进程管理和网络监控</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat -[atunlp]
参数说明
<span class="nt">-a</span> <span class="c"># 列出全部数据</span>
<span class="nt">-t</span> <span class="c"># 列出tcp网络数据包</span>
<span class="nt">-u</span> <span class="c"># 列出udp网络数据包</span>
<span class="nt">-n</span> <span class="c"># 不列出进程的服务名称 以port number来显示</span>
<span class="nt">-l</span> <span class="c"># 列出目前正在网络监听的服务</span>
<span class="nt">-p</span> <span class="c"># 列出网络服务的进程PID</span>
</code></pre></div></div>

<p>具体的显示字段含义请你看书P527</p>

<h3 id="18demsg-显示内核信息">18.<code class="language-plaintext highlighter-rouge">demsg</code> 显示内核信息</h3>

<p>开机的时候，显示的那些一闪而过东西，可以用这个重新搞出来看。</p>

<p>反正内核产生的信息都可以用这个读取。而且还要 <code class="language-plaintext highlighter-rouge">sudo</code> 的权限才能读取。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dmesg | more
dmesg | <span class="nb">grep</span> <span class="nt">-i</span> hd
<span class="c">#一般demsg会配合其他命令一起使用的。</span>
</code></pre></div></div>

<h3 id="19vmstat-检测系统资源变化">19.<code class="language-plaintext highlighter-rouge">vmstat</code> 检测系统资源变化</h3>

<p>这个监测CPU/内存/磁盘输入输出状态等</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vmstat <span class="o">[</span><span class="nt">-a</span><span class="o">]</span> 
vmstat <span class="o">[</span><span class="nt">-fs</span><span class="o">]</span>
vmstat <span class="o">[</span><span class="nt">-S</span> 单位]
vmstat <span class="o">[</span><span class="nt">-d</span><span class="o">]</span>
vmstat <span class="o">[</span><span class="nt">-p</span> 分区]

<span class="c"># 参数说明 我懒得写了你自己看P529吧</span>
<span class="nt">-a</span> <span class="c"># </span>
<span class="nt">-f</span> <span class="c">#</span>
<span class="nt">-s</span> <span class="c">#</span>
<span class="nt">-S</span> <span class="c">#</span>
<span class="nt">-d</span> <span class="c">#</span>
<span class="nt">-p</span> <span class="c">#</span>
</code></pre></div></div>

<h3 id="正在被程序使用的文件">【正在被程序使用的文件】</h3>
<h3 id="20fuser-找出正在使用该程序的文件">20.<code class="language-plaintext highlighter-rouge">fuser</code> 找出正在使用该程序的文件</h3>
<h3 id="21lsof-列出被进程所打开的文件名">21.<code class="language-plaintext highlighter-rouge">lsof</code> 列出被进程所打开的文件名</h3>
<h3 id="22pidof-找出正在执行某个进程的pid">22.<code class="language-plaintext highlighter-rouge">pidof</code> 找出正在执行某个进程的PID</h3>

<p>我总有种预感，我这一张这么草率的看过去，以后会吃大亏吧。</p>

:ET